


CMAK_policy(SET CMP0071 NEW)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_POSITION_INDEPENDENT_CODE ${Qt5_POSITION_INDEPENDENT_CODE})
set(QT_PROTOBUF_NAMESPACE QtProtobuf)
if(NOT TARGET ${QT_PROTOBUF_NAMESPACE}::qtprotobufgen)
    find_package(${QT_PROTOBUF_NAMESPACE} COMPONENTS ProtobufGenerator CONFIG REQUIRED)
endif()
if(NOT TARGET ${QT_PROTOBUF_NAMESPACE}::Protobuf)
    find_package(${QT_PROTOBUF_NAMESPACE} COMPONENTS Protobuf CONFIG REQUIRED)
endif()
if(NOT TARGET ${QT_PROTOBUF_NAMESPACE}::Grpc)
    find_package(${QT_PROTOBUF_NAMESPACE} COMPONENTS Grpc CONFIG REQUIRED)
endif()


#Qt libraries
find_package(Qt5 REQUIRED COMPONENTS Quick Core Widgets Network Concurrent)

set(others)
list(APPEND other
        profile.h)
set(qt_source)
list(APPEND qt_source
        "ServerMKO.h"
        "ServerMKO.cpp"
        )

# Targets test_rpc(client|server)
qt_add_executable(${PROJECT_NAME} ${other} ${qt_source} qml.qrc)

qt_add_qml_module(${PROJECT_NAME}
    URI ${PROJECT_NAME}
    VERSION 1.0
    QML_FILES main.qml
)

qtprotobuf_generate(TARGET ${PROJECT_NAME}
        QML TRUE
        PROTO_FILES ${CMAKE_CURRENT_SOURCE_DIR}/test_rpc.proto)

target_compile_definitions(${PROJECT_NAME}
        PRIVATE "$<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:QT_QML_DEBUG>")

#target_link_libraries(${PROJECT_NAME} test_rpc_parser)

target_link_libraries(${PROJECT_NAME}
        PRIVATE
        Qt5::Core
        Qt5::Quick
        Qt5::Widgets
        Qt5::Network
        Qt5::Concurrent
        ${QT_PROTOBUF_NAMESPACE}::Grpc
        ${QT_PROTOBUF_NAMESPACE}::Protobuf
        )

if(QT_PROTOBUF_STATIC)
    add_definitions(-DQT_PROTOBUF_STATIC)# add_definitions is used because old cmake versions
    # compatibility
endif()

#[[foreach(_target
        test_client test_server)
        add_executable(${_target}
            "${_target}.cpp" "${other}" "${qt_source}")
        target_link_libraries(${_target}
            tr_grpc_proto
            test_rpc_parser
            ${_REFLECTION}
            ${_GRPC_GRPCPP}
            ${_PROTOBUF_LIBPROTOBUF}
	    Qt6::Core
	    Qt6::Widgets
	    Qt6::Network
	    Qt6::Concurrent)
endforeach()]]







