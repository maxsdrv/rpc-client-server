/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#pragma once

#include <QObject>
#include <QMetaType>
#include <QList>
#include <QProtobufObject>
#include <QProtobufLazyMessagePointer>
#include <QSharedPointer>

#include <memory>
#include <unordered_map>

#include <QtQml/QQmlListProperty>
#include <QQmlListPropertyConstructor>

#include <QByteArray>
#include <QString>

namespace google {
namespace protobuf {

class NullValueGadget : public QObject
{
    Q_OBJECT

public:
    static void registerTypes();

private:
    NullValueGadget() {}
    NullValueGadget(const NullValueGadget &) = delete;
    NullValueGadget(NullValueGadget &&) = delete;

public:
    enum NullValue {
        NULL_VALUE = 0,
    };
    Q_ENUM(NullValue)
    using NullValueRepeated = QList<NullValue>;
};


}
}

Q_DECLARE_METATYPE(google::protobuf::NullValueGadget::NullValueRepeated)

namespace google {
namespace protobuf {
class Struct;
using StructRepeated = QList<QSharedPointer<Struct>>;

}
}


namespace google {
namespace protobuf {
class Value;
using ValueRepeated = QList<QSharedPointer<Value>>;

}
}


namespace google {
namespace protobuf {
class ListValue;
using ListValueRepeated = QList<QSharedPointer<ListValue>>;

}
}


namespace google {
namespace protobuf {
namespace Struct_QtProtobufNested {
}

class Struct : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(Struct)
    Q_PROPERTY(google::protobuf::Struct::FieldsEntry fields READ fields WRITE setFields NOTIFY fieldsChanged SCRIPTABLE true)

public:
    using FieldsEntry = QMap<QString, QSharedPointer<Value>>;
    Struct(QObject *parent = nullptr);
    Struct(const Struct::FieldsEntry &fields,QObject *parent = nullptr);
    virtual ~Struct();
    Struct(const Struct &other);
    Struct &operator =(const Struct &other);
    Struct(Struct &&other);
    Struct &operator =(Struct &&other);
    bool operator ==(const Struct &other) const;
    bool operator !=(const Struct &other) const;

    Struct::FieldsEntry fields() const {
        return m_fields;
    }

    Struct::FieldsEntry &fields() {
        return m_fields;
    }

    void setFields(const Struct::FieldsEntry &fields);
    static void registerTypes();

signals:
    void fieldsChanged();

private:

private:
    Struct::FieldsEntry m_fields;
};

using StructRepeated = QList<QSharedPointer<Struct>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::Struct)
Q_DECLARE_METATYPE(google::protobuf::StructRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::Struct>)
#ifndef Q_PROTOBUF_MAP_QString_QString
#define Q_PROTOBUF_MAP_QString_QString
Q_DECLARE_METATYPE(google::protobuf::Struct::FieldsEntry)
#endif

namespace google {
namespace protobuf {
namespace Value_QtProtobufNested {
}

class Value : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(Value)
    Q_PROPERTY(google::protobuf::NullValueGadget::NullValue nullValue READ nullValue WRITE setNullValue NOTIFY nullValueChanged SCRIPTABLE true)
    Q_PROPERTY(double numberValue READ numberValue WRITE setNumberValue NOTIFY numberValueChanged SCRIPTABLE true)
    Q_PROPERTY(QString stringValue READ stringValue WRITE setStringValue NOTIFY stringValueChanged SCRIPTABLE true)
    Q_PROPERTY(bool boolValue READ boolValue WRITE setBoolValue NOTIFY boolValueChanged SCRIPTABLE true)
    Q_PROPERTY(google::protobuf::Struct *structValue READ structValue_p WRITE setStructValue_p NOTIFY structValueChanged)
    Q_PROPERTY(google::protobuf::ListValue *listValue READ listValue_p WRITE setListValue_p NOTIFY listValueChanged)

public:
    Value(QObject *parent = nullptr);
    Value(NullValueGadget::NullValue nullValue,QObject *parent = nullptr);
    Value(NullValueGadget::NullValue nullValue,double numberValue,QObject *parent = nullptr);
    Value(NullValueGadget::NullValue nullValue,double numberValue,const QString &stringValue,QObject *parent = nullptr);
    Value(NullValueGadget::NullValue nullValue,double numberValue,const QString &stringValue,bool boolValue,QObject *parent = nullptr);
    Value(NullValueGadget::NullValue nullValue,double numberValue,const QString &stringValue,bool boolValue,const Struct &structValue,QObject *parent = nullptr);
    Value(NullValueGadget::NullValue nullValue,double numberValue,const QString &stringValue,bool boolValue,const Struct &structValue,const ListValue &listValue,QObject *parent = nullptr);
    virtual ~Value();
    Value(const Value &other);
    Value &operator =(const Value &other);
    Value(Value &&other);
    Value &operator =(Value &&other);
    bool operator ==(const Value &other) const;
    bool operator !=(const Value &other) const;

    NullValueGadget::NullValue nullValue() const {
        return m_nullValue;
    }


    double numberValue() const {
        return m_numberValue;
    }


    QString stringValue() const {
        return m_stringValue;
    }


    bool boolValue() const {
        return m_boolValue;
    }


    const Struct &structValue() const;

    const ListValue &listValue() const;
    void setNullValue(const NullValueGadget::NullValue &nullValue) {
        if (m_nullValue != nullValue) {
            m_nullValue = nullValue;
            nullValueChanged();
        }
    }

    void setNumberValue(const double &numberValue) {
        if (m_numberValue != numberValue) {
            m_numberValue = numberValue;
            numberValueChanged();
        }
    }

    void setStringValue(const QString &stringValue);
    void setBoolValue(const bool &boolValue) {
        if (m_boolValue != boolValue) {
            m_boolValue = boolValue;
            boolValueChanged();
        }
    }

    void setStructValue(const Struct &structValue);
    void setListValue(const ListValue &listValue);
    static void registerTypes();

signals:
    void nullValueChanged();
    void numberValueChanged();
    void stringValueChanged();
    void boolValueChanged();
    void structValueChanged();
    void listValueChanged();

private:
    Struct *structValue_p() const;
    ListValue *listValue_p() const;
    void setStructValue_p(Struct *structValue);
    void setListValue_p(ListValue *listValue);

private:
    NullValueGadget::NullValue m_nullValue;
    double m_numberValue;
    QString m_stringValue;
    bool m_boolValue;
    QProtobufLazyMessagePointer<Struct> m_structValue;
    QProtobufLazyMessagePointer<ListValue> m_listValue;
};

using ValueRepeated = QList<QSharedPointer<Value>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::Value)
Q_DECLARE_METATYPE(google::protobuf::ValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::Value>)

namespace google {
namespace protobuf {
namespace ListValue_QtProtobufNested {
}

class ListValue : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(ListValue)
    Q_PROPERTY(google::protobuf::ValueRepeated valuesData READ values WRITE setValues NOTIFY valuesChanged SCRIPTABLE true)
    Q_PROPERTY(QQmlListProperty<google::protobuf::Value> values READ values_l NOTIFY valuesChanged)

public:
    ListValue(QObject *parent = nullptr);
    ListValue(const ValueRepeated &values,QObject *parent = nullptr);
    virtual ~ListValue();
    ListValue(const ListValue &other);
    ListValue &operator =(const ListValue &other);
    ListValue(ListValue &&other);
    ListValue &operator =(ListValue &&other);
    bool operator ==(const ListValue &other) const;
    bool operator !=(const ListValue &other) const;

    ValueRepeated values() const {
        return m_values;
    }

    ValueRepeated &values() {
        return m_values;
    }

    QQmlListProperty<Value> values_l();
    void setValues(const ValueRepeated &values);
    static void registerTypes();

signals:
    void valuesChanged();

private:

private:
    ValueRepeated m_values;
};

using ListValueRepeated = QList<QSharedPointer<ListValue>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::ListValue)
Q_DECLARE_METATYPE(google::protobuf::ListValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::ListValue>)
