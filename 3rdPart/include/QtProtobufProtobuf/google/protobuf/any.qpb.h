/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#pragma once

#include <QObject>
#include <QMetaType>
#include <QList>
#include <QProtobufObject>
#include <QProtobufLazyMessagePointer>
#include <QSharedPointer>

#include <memory>
#include <unordered_map>

#include <QtQml/QQmlListProperty>
#include <QQmlListPropertyConstructor>

#include <QByteArray>
#include <QString>

namespace google {
namespace protobuf {
class Any;
using AnyRepeated = QList<QSharedPointer<Any>>;

}
}


namespace google {
namespace protobuf {
namespace Any_QtProtobufNested {
}

class Any : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(Any)
    Q_PROPERTY(QString typeUrl READ typeUrl WRITE setTypeUrl NOTIFY typeUrlChanged SCRIPTABLE true)
    Q_PROPERTY(QByteArray value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE true)

public:
    Any(QObject *parent = nullptr);
    Any(const QString &typeUrl,QObject *parent = nullptr);
    Any(const QString &typeUrl,const QByteArray &value,QObject *parent = nullptr);
    virtual ~Any();
    Any(const Any &other);
    Any &operator =(const Any &other);
    Any(Any &&other);
    Any &operator =(Any &&other);
    bool operator ==(const Any &other) const;
    bool operator !=(const Any &other) const;

    QString typeUrl() const {
        return m_typeUrl;
    }


    QByteArray value() const {
        return m_value;
    }

    void setTypeUrl(const QString &typeUrl);
    void setValue(const QByteArray &value);
    static void registerTypes();

signals:
    void typeUrlChanged();
    void valueChanged();

private:

private:
    QString m_typeUrl;
    QByteArray m_value;
};

using AnyRepeated = QList<QSharedPointer<Any>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::Any)
Q_DECLARE_METATYPE(google::protobuf::AnyRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::Any>)
