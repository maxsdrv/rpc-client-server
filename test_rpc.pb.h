// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5frpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5frpc_2eproto;
namespace testrpc {
class Addition;
struct AdditionDefaultTypeInternal;
extern AdditionDefaultTypeInternal _Addition_default_instance_;
class Operator;
struct OperatorDefaultTypeInternal;
extern OperatorDefaultTypeInternal _Operator_default_instance_;
class OperatorsSummary;
struct OperatorsSummaryDefaultTypeInternal;
extern OperatorsSummaryDefaultTypeInternal _OperatorsSummary_default_instance_;
class SummNote;
struct SummNoteDefaultTypeInternal;
extern SummNoteDefaultTypeInternal _SummNote_default_instance_;
class Variables;
struct VariablesDefaultTypeInternal;
extern VariablesDefaultTypeInternal _Variables_default_instance_;
}  // namespace testrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::testrpc::Addition* Arena::CreateMaybeMessage<::testrpc::Addition>(Arena*);
template<> ::testrpc::Operator* Arena::CreateMaybeMessage<::testrpc::Operator>(Arena*);
template<> ::testrpc::OperatorsSummary* Arena::CreateMaybeMessage<::testrpc::OperatorsSummary>(Arena*);
template<> ::testrpc::SummNote* Arena::CreateMaybeMessage<::testrpc::SummNote>(Arena*);
template<> ::testrpc::Variables* Arena::CreateMaybeMessage<::testrpc::Variables>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace testrpc {

// ===================================================================

class Variables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testrpc.Variables) */ {
 public:
  inline Variables() : Variables(nullptr) {}
  ~Variables() override;
  explicit PROTOBUF_CONSTEXPR Variables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Variables(const Variables& from);
  Variables(Variables&& from) noexcept
    : Variables() {
    *this = ::std::move(from);
  }

  inline Variables& operator=(const Variables& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variables& operator=(Variables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variables& default_instance() {
    return *internal_default_instance();
  }
  static inline const Variables* internal_default_instance() {
    return reinterpret_cast<const Variables*>(
               &_Variables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Variables& a, Variables& b) {
    a.Swap(&b);
  }
  inline void Swap(Variables* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variables>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Variables& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Variables& from) {
    Variables::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variables* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testrpc.Variables";
  }
  protected:
  explicit Variables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kValue2FieldNumber = 2,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // int32 value_2 = 2;
  void clear_value_2();
  int32_t value_2() const;
  void set_value_2(int32_t value);
  private:
  int32_t _internal_value_2() const;
  void _internal_set_value_2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testrpc.Variables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t value_;
    int32_t value_2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5frpc_2eproto;
};
// -------------------------------------------------------------------

class Operator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testrpc.Operator) */ {
 public:
  inline Operator() : Operator(nullptr) {}
  ~Operator() override;
  explicit PROTOBUF_CONSTEXPR Operator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operator(const Operator& from);
  Operator(Operator&& from) noexcept
    : Operator() {
    *this = ::std::move(from);
  }

  inline Operator& operator=(const Operator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operator& operator=(Operator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operator* internal_default_instance() {
    return reinterpret_cast<const Operator*>(
               &_Operator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Operator& a, Operator& b) {
    a.Swap(&b);
  }
  inline void Swap(Operator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Operator& from) {
    Operator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testrpc.Operator";
  }
  protected:
  explicit Operator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAdditionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .testrpc.Addition addition_ = 2;
  bool has_addition_() const;
  private:
  bool _internal_has_addition_() const;
  public:
  void clear_addition_();
  const ::testrpc::Addition& addition_() const;
  PROTOBUF_NODISCARD ::testrpc::Addition* release_addition_();
  ::testrpc::Addition* mutable_addition_();
  void set_allocated_addition_(::testrpc::Addition* addition_);
  private:
  const ::testrpc::Addition& _internal_addition_() const;
  ::testrpc::Addition* _internal_mutable_addition_();
  public:
  void unsafe_arena_set_allocated_addition_(
      ::testrpc::Addition* addition_);
  ::testrpc::Addition* unsafe_arena_release_addition_();

  // @@protoc_insertion_point(class_scope:testrpc.Operator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::testrpc::Addition* addition__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5frpc_2eproto;
};
// -------------------------------------------------------------------

class Addition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testrpc.Addition) */ {
 public:
  inline Addition() : Addition(nullptr) {}
  ~Addition() override;
  explicit PROTOBUF_CONSTEXPR Addition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Addition(const Addition& from);
  Addition(Addition&& from) noexcept
    : Addition() {
    *this = ::std::move(from);
  }

  inline Addition& operator=(const Addition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addition& operator=(Addition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Addition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Addition* internal_default_instance() {
    return reinterpret_cast<const Addition*>(
               &_Addition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Addition& a, Addition& b) {
    a.Swap(&b);
  }
  inline void Swap(Addition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Addition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Addition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Addition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Addition& from) {
    Addition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testrpc.Addition";
  }
  protected:
  explicit Addition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result_ = 1;
  void clear_result_();
  int32_t result_() const;
  void set_result_(int32_t value);
  private:
  int32_t _internal_result_() const;
  void _internal_set_result_(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testrpc.Addition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t result__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5frpc_2eproto;
};
// -------------------------------------------------------------------

class SummNote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testrpc.SummNote) */ {
 public:
  inline SummNote() : SummNote(nullptr) {}
  ~SummNote() override;
  explicit PROTOBUF_CONSTEXPR SummNote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummNote(const SummNote& from);
  SummNote(SummNote&& from) noexcept
    : SummNote() {
    *this = ::std::move(from);
  }

  inline SummNote& operator=(const SummNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummNote& operator=(SummNote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummNote& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummNote* internal_default_instance() {
    return reinterpret_cast<const SummNote*>(
               &_SummNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SummNote& a, SummNote& b) {
    a.Swap(&b);
  }
  inline void Swap(SummNote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummNote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SummNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SummNote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SummNote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SummNote& from) {
    SummNote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummNote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testrpc.SummNote";
  }
  protected:
  explicit SummNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTypeOperatorFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .testrpc.Variables type_operator = 1;
  bool has_type_operator() const;
  private:
  bool _internal_has_type_operator() const;
  public:
  void clear_type_operator();
  const ::testrpc::Variables& type_operator() const;
  PROTOBUF_NODISCARD ::testrpc::Variables* release_type_operator();
  ::testrpc::Variables* mutable_type_operator();
  void set_allocated_type_operator(::testrpc::Variables* type_operator);
  private:
  const ::testrpc::Variables& _internal_type_operator() const;
  ::testrpc::Variables* _internal_mutable_type_operator();
  public:
  void unsafe_arena_set_allocated_type_operator(
      ::testrpc::Variables* type_operator);
  ::testrpc::Variables* unsafe_arena_release_type_operator();

  // @@protoc_insertion_point(class_scope:testrpc.SummNote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::testrpc::Variables* type_operator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5frpc_2eproto;
};
// -------------------------------------------------------------------

class OperatorsSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testrpc.OperatorsSummary) */ {
 public:
  inline OperatorsSummary() : OperatorsSummary(nullptr) {}
  ~OperatorsSummary() override;
  explicit PROTOBUF_CONSTEXPR OperatorsSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperatorsSummary(const OperatorsSummary& from);
  OperatorsSummary(OperatorsSummary&& from) noexcept
    : OperatorsSummary() {
    *this = ::std::move(from);
  }

  inline OperatorsSummary& operator=(const OperatorsSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperatorsSummary& operator=(OperatorsSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperatorsSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperatorsSummary* internal_default_instance() {
    return reinterpret_cast<const OperatorsSummary*>(
               &_OperatorsSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OperatorsSummary& a, OperatorsSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(OperatorsSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperatorsSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperatorsSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperatorsSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperatorsSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperatorsSummary& from) {
    OperatorsSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperatorsSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testrpc.OperatorsSummary";
  }
  protected:
  explicit OperatorsSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesCountFieldNumber = 1,
    kFeatureCountFieldNumber = 2,
    kElapsedTimeFieldNumber = 3,
  };
  // int32 variables_count = 1;
  void clear_variables_count();
  int32_t variables_count() const;
  void set_variables_count(int32_t value);
  private:
  int32_t _internal_variables_count() const;
  void _internal_set_variables_count(int32_t value);
  public:

  // int32 feature_count = 2;
  void clear_feature_count();
  int32_t feature_count() const;
  void set_feature_count(int32_t value);
  private:
  int32_t _internal_feature_count() const;
  void _internal_set_feature_count(int32_t value);
  public:

  // int32 elapsed_time = 3;
  void clear_elapsed_time();
  int32_t elapsed_time() const;
  void set_elapsed_time(int32_t value);
  private:
  int32_t _internal_elapsed_time() const;
  void _internal_set_elapsed_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testrpc.OperatorsSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t variables_count_;
    int32_t feature_count_;
    int32_t elapsed_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variables

// int32 value = 1;
inline void Variables::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t Variables::_internal_value() const {
  return _impl_.value_;
}
inline int32_t Variables::value() const {
  // @@protoc_insertion_point(field_get:testrpc.Variables.value)
  return _internal_value();
}
inline void Variables::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void Variables::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:testrpc.Variables.value)
}

// int32 value_2 = 2;
inline void Variables::clear_value_2() {
  _impl_.value_2_ = 0;
}
inline int32_t Variables::_internal_value_2() const {
  return _impl_.value_2_;
}
inline int32_t Variables::value_2() const {
  // @@protoc_insertion_point(field_get:testrpc.Variables.value_2)
  return _internal_value_2();
}
inline void Variables::_internal_set_value_2(int32_t value) {
  
  _impl_.value_2_ = value;
}
inline void Variables::set_value_2(int32_t value) {
  _internal_set_value_2(value);
  // @@protoc_insertion_point(field_set:testrpc.Variables.value_2)
}

// -------------------------------------------------------------------

// Operator

// string name = 1;
inline void Operator::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Operator::name() const {
  // @@protoc_insertion_point(field_get:testrpc.Operator.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operator::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testrpc.Operator.name)
}
inline std::string* Operator::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:testrpc.Operator.name)
  return _s;
}
inline const std::string& Operator::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Operator::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Operator::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Operator::release_name() {
  // @@protoc_insertion_point(field_release:testrpc.Operator.name)
  return _impl_.name_.Release();
}
inline void Operator::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testrpc.Operator.name)
}

// .testrpc.Addition addition_ = 2;
inline bool Operator::_internal_has_addition_() const {
  return this != internal_default_instance() && _impl_.addition__ != nullptr;
}
inline bool Operator::has_addition_() const {
  return _internal_has_addition_();
}
inline void Operator::clear_addition_() {
  if (GetArenaForAllocation() == nullptr && _impl_.addition__ != nullptr) {
    delete _impl_.addition__;
  }
  _impl_.addition__ = nullptr;
}
inline const ::testrpc::Addition& Operator::_internal_addition_() const {
  const ::testrpc::Addition* p = _impl_.addition__;
  return p != nullptr ? *p : reinterpret_cast<const ::testrpc::Addition&>(
      ::testrpc::_Addition_default_instance_);
}
inline const ::testrpc::Addition& Operator::addition_() const {
  // @@protoc_insertion_point(field_get:testrpc.Operator.addition_)
  return _internal_addition_();
}
inline void Operator::unsafe_arena_set_allocated_addition_(
    ::testrpc::Addition* addition_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addition__);
  }
  _impl_.addition__ = addition_;
  if (addition_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testrpc.Operator.addition_)
}
inline ::testrpc::Addition* Operator::release_addition_() {
  
  ::testrpc::Addition* temp = _impl_.addition__;
  _impl_.addition__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::testrpc::Addition* Operator::unsafe_arena_release_addition_() {
  // @@protoc_insertion_point(field_release:testrpc.Operator.addition_)
  
  ::testrpc::Addition* temp = _impl_.addition__;
  _impl_.addition__ = nullptr;
  return temp;
}
inline ::testrpc::Addition* Operator::_internal_mutable_addition_() {
  
  if (_impl_.addition__ == nullptr) {
    auto* p = CreateMaybeMessage<::testrpc::Addition>(GetArenaForAllocation());
    _impl_.addition__ = p;
  }
  return _impl_.addition__;
}
inline ::testrpc::Addition* Operator::mutable_addition_() {
  ::testrpc::Addition* _msg = _internal_mutable_addition_();
  // @@protoc_insertion_point(field_mutable:testrpc.Operator.addition_)
  return _msg;
}
inline void Operator::set_allocated_addition_(::testrpc::Addition* addition_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.addition__;
  }
  if (addition_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addition_);
    if (message_arena != submessage_arena) {
      addition_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addition_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addition__ = addition_;
  // @@protoc_insertion_point(field_set_allocated:testrpc.Operator.addition_)
}

// -------------------------------------------------------------------

// Addition

// int32 result_ = 1;
inline void Addition::clear_result_() {
  _impl_.result__ = 0;
}
inline int32_t Addition::_internal_result_() const {
  return _impl_.result__;
}
inline int32_t Addition::result_() const {
  // @@protoc_insertion_point(field_get:testrpc.Addition.result_)
  return _internal_result_();
}
inline void Addition::_internal_set_result_(int32_t value) {
  
  _impl_.result__ = value;
}
inline void Addition::set_result_(int32_t value) {
  _internal_set_result_(value);
  // @@protoc_insertion_point(field_set:testrpc.Addition.result_)
}

// -------------------------------------------------------------------

// SummNote

// .testrpc.Variables type_operator = 1;
inline bool SummNote::_internal_has_type_operator() const {
  return this != internal_default_instance() && _impl_.type_operator_ != nullptr;
}
inline bool SummNote::has_type_operator() const {
  return _internal_has_type_operator();
}
inline void SummNote::clear_type_operator() {
  if (GetArenaForAllocation() == nullptr && _impl_.type_operator_ != nullptr) {
    delete _impl_.type_operator_;
  }
  _impl_.type_operator_ = nullptr;
}
inline const ::testrpc::Variables& SummNote::_internal_type_operator() const {
  const ::testrpc::Variables* p = _impl_.type_operator_;
  return p != nullptr ? *p : reinterpret_cast<const ::testrpc::Variables&>(
      ::testrpc::_Variables_default_instance_);
}
inline const ::testrpc::Variables& SummNote::type_operator() const {
  // @@protoc_insertion_point(field_get:testrpc.SummNote.type_operator)
  return _internal_type_operator();
}
inline void SummNote::unsafe_arena_set_allocated_type_operator(
    ::testrpc::Variables* type_operator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_operator_);
  }
  _impl_.type_operator_ = type_operator;
  if (type_operator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testrpc.SummNote.type_operator)
}
inline ::testrpc::Variables* SummNote::release_type_operator() {
  
  ::testrpc::Variables* temp = _impl_.type_operator_;
  _impl_.type_operator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::testrpc::Variables* SummNote::unsafe_arena_release_type_operator() {
  // @@protoc_insertion_point(field_release:testrpc.SummNote.type_operator)
  
  ::testrpc::Variables* temp = _impl_.type_operator_;
  _impl_.type_operator_ = nullptr;
  return temp;
}
inline ::testrpc::Variables* SummNote::_internal_mutable_type_operator() {
  
  if (_impl_.type_operator_ == nullptr) {
    auto* p = CreateMaybeMessage<::testrpc::Variables>(GetArenaForAllocation());
    _impl_.type_operator_ = p;
  }
  return _impl_.type_operator_;
}
inline ::testrpc::Variables* SummNote::mutable_type_operator() {
  ::testrpc::Variables* _msg = _internal_mutable_type_operator();
  // @@protoc_insertion_point(field_mutable:testrpc.SummNote.type_operator)
  return _msg;
}
inline void SummNote::set_allocated_type_operator(::testrpc::Variables* type_operator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.type_operator_;
  }
  if (type_operator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(type_operator);
    if (message_arena != submessage_arena) {
      type_operator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_operator, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.type_operator_ = type_operator;
  // @@protoc_insertion_point(field_set_allocated:testrpc.SummNote.type_operator)
}

// string message = 2;
inline void SummNote::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SummNote::message() const {
  // @@protoc_insertion_point(field_get:testrpc.SummNote.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummNote::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testrpc.SummNote.message)
}
inline std::string* SummNote::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:testrpc.SummNote.message)
  return _s;
}
inline const std::string& SummNote::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SummNote::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SummNote::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* SummNote::release_message() {
  // @@protoc_insertion_point(field_release:testrpc.SummNote.message)
  return _impl_.message_.Release();
}
inline void SummNote::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testrpc.SummNote.message)
}

// -------------------------------------------------------------------

// OperatorsSummary

// int32 variables_count = 1;
inline void OperatorsSummary::clear_variables_count() {
  _impl_.variables_count_ = 0;
}
inline int32_t OperatorsSummary::_internal_variables_count() const {
  return _impl_.variables_count_;
}
inline int32_t OperatorsSummary::variables_count() const {
  // @@protoc_insertion_point(field_get:testrpc.OperatorsSummary.variables_count)
  return _internal_variables_count();
}
inline void OperatorsSummary::_internal_set_variables_count(int32_t value) {
  
  _impl_.variables_count_ = value;
}
inline void OperatorsSummary::set_variables_count(int32_t value) {
  _internal_set_variables_count(value);
  // @@protoc_insertion_point(field_set:testrpc.OperatorsSummary.variables_count)
}

// int32 feature_count = 2;
inline void OperatorsSummary::clear_feature_count() {
  _impl_.feature_count_ = 0;
}
inline int32_t OperatorsSummary::_internal_feature_count() const {
  return _impl_.feature_count_;
}
inline int32_t OperatorsSummary::feature_count() const {
  // @@protoc_insertion_point(field_get:testrpc.OperatorsSummary.feature_count)
  return _internal_feature_count();
}
inline void OperatorsSummary::_internal_set_feature_count(int32_t value) {
  
  _impl_.feature_count_ = value;
}
inline void OperatorsSummary::set_feature_count(int32_t value) {
  _internal_set_feature_count(value);
  // @@protoc_insertion_point(field_set:testrpc.OperatorsSummary.feature_count)
}

// int32 elapsed_time = 3;
inline void OperatorsSummary::clear_elapsed_time() {
  _impl_.elapsed_time_ = 0;
}
inline int32_t OperatorsSummary::_internal_elapsed_time() const {
  return _impl_.elapsed_time_;
}
inline int32_t OperatorsSummary::elapsed_time() const {
  // @@protoc_insertion_point(field_get:testrpc.OperatorsSummary.elapsed_time)
  return _internal_elapsed_time();
}
inline void OperatorsSummary::_internal_set_elapsed_time(int32_t value) {
  
  _impl_.elapsed_time_ = value;
}
inline void OperatorsSummary::set_elapsed_time(int32_t value) {
  _internal_set_elapsed_time(value);
  // @@protoc_insertion_point(field_set:testrpc.OperatorsSummary.elapsed_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5frpc_2eproto
