// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_rpc.proto

#include "test_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace testrpc {
PROTOBUF_CONSTEXPR Variables::Variables(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.value_2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VariablesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariablesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariablesDefaultTypeInternal() {}
  union {
    Variables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariablesDefaultTypeInternal _Variables_default_instance_;
PROTOBUF_CONSTEXPR Operator::Operator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action__)*/nullptr
  , /*decltype(_impl_.items_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorDefaultTypeInternal() {}
  union {
    Operator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorDefaultTypeInternal _Operator_default_instance_;
PROTOBUF_CONSTEXPR Action::Action(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionDefaultTypeInternal _Action_default_instance_;
PROTOBUF_CONSTEXPR SummNote::SummNote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_operator_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SummNoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummNoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummNoteDefaultTypeInternal() {}
  union {
    SummNote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummNoteDefaultTypeInternal _SummNote_default_instance_;
PROTOBUF_CONSTEXPR OperatorsSummary::OperatorsSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_count_)*/0
  , /*decltype(_impl_.feature_count_)*/0
  , /*decltype(_impl_.elapsed_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperatorsSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorsSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorsSummaryDefaultTypeInternal() {}
  union {
    OperatorsSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorsSummaryDefaultTypeInternal _OperatorsSummary_default_instance_;
}  // namespace testrpc
static ::_pb::Metadata file_level_metadata_test_5frpc_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_test_5frpc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test_5frpc_2eproto = nullptr;

const uint32_t TableStruct_test_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testrpc::Variables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testrpc::Variables, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::testrpc::Variables, _impl_.value_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testrpc::Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testrpc::Operator, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::testrpc::Operator, _impl_.action__),
  PROTOBUF_FIELD_OFFSET(::testrpc::Operator, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testrpc::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testrpc::Action, _impl_.result__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testrpc::SummNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testrpc::SummNote, _impl_.type_operator_),
  PROTOBUF_FIELD_OFFSET(::testrpc::SummNote, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testrpc::OperatorsSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::testrpc::OperatorsSummary, _impl_.variables_count_),
  PROTOBUF_FIELD_OFFSET(::testrpc::OperatorsSummary, _impl_.feature_count_),
  PROTOBUF_FIELD_OFFSET(::testrpc::OperatorsSummary, _impl_.elapsed_time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::testrpc::Variables)},
  { 8, -1, -1, sizeof(::testrpc::Operator)},
  { 17, -1, -1, sizeof(::testrpc::Action)},
  { 24, -1, -1, sizeof(::testrpc::SummNote)},
  { 32, -1, -1, sizeof(::testrpc::OperatorsSummary)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::testrpc::_Variables_default_instance_._instance,
  &::testrpc::_Operator_default_instance_._instance,
  &::testrpc::_Action_default_instance_._instance,
  &::testrpc::_SummNote_default_instance_._instance,
  &::testrpc::_OperatorsSummary_default_instance_._instance,
};

const char descriptor_table_protodef_test_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016test_rpc.proto\022\007testrpc\"+\n\tVariables\022\r"
  "\n\005value\030\001 \001(\005\022\017\n\007value_2\030\002 \001(\005\"]\n\010Operat"
  "or\022\014\n\004name\030\001 \001(\t\022 \n\007action_\030\002 \001(\0132\017.test"
  "rpc.Action\022!\n\005items\030\003 \001(\0132\022.testrpc.Vari"
  "ables\"\031\n\006Action\022\017\n\007result_\030\001 \001(\005\"F\n\010Summ"
  "Note\022)\n\rtype_operator\030\001 \001(\0132\022.testrpc.Va"
  "riables\022\017\n\007message\030\002 \001(\t\"X\n\020OperatorsSum"
  "mary\022\027\n\017variables_count\030\001 \001(\005\022\025\n\rfeature"
  "_count\030\002 \001(\005\022\024\n\014elapsed_time\030\003 \001(\0052\300\001\n\010T"
  "estgRPC\0225\n\nget_result\022\022.testrpc.Variable"
  "s\032\021.testrpc.Operator\"\000\022B\n\rrecord_result\022"
  "\022.testrpc.Variables\032\031.testrpc.OperatorsS"
  "ummary\"\000(\001\0229\n\013result_chat\022\021.testrpc.Summ"
  "Note\032\021.testrpc.SummNote\"\000(\0010\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_test_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_5frpc_2eproto = {
    false, false, 557, descriptor_table_protodef_test_5frpc_2eproto,
    "test_rpc.proto",
    &descriptor_table_test_5frpc_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_test_5frpc_2eproto::offsets,
    file_level_metadata_test_5frpc_2eproto, file_level_enum_descriptors_test_5frpc_2eproto,
    file_level_service_descriptors_test_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_5frpc_2eproto_getter() {
  return &descriptor_table_test_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_5frpc_2eproto(&descriptor_table_test_5frpc_2eproto);
namespace testrpc {

// ===================================================================

class Variables::_Internal {
 public:
};

Variables::Variables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testrpc.Variables)
}
Variables::Variables(const Variables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Variables* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.value_2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_2_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.value_2_));
  // @@protoc_insertion_point(copy_constructor:testrpc.Variables)
}

inline void Variables::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , decltype(_impl_.value_2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Variables::~Variables() {
  // @@protoc_insertion_point(destructor:testrpc.Variables)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Variables::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Variables::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Variables::Clear() {
// @@protoc_insertion_point(message_clear_start:testrpc.Variables)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_2_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.value_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Variables::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Variables::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testrpc.Variables)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // int32 value_2 = 2;
  if (this->_internal_value_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testrpc.Variables)
  return target;
}

size_t Variables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testrpc.Variables)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // int32 value_2 = 2;
  if (this->_internal_value_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Variables::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Variables::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Variables::GetClassData() const { return &_class_data_; }


void Variables::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Variables*>(&to_msg);
  auto& from = static_cast<const Variables&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testrpc.Variables)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_value_2() != 0) {
    _this->_internal_set_value_2(from._internal_value_2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Variables::CopyFrom(const Variables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testrpc.Variables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variables::IsInitialized() const {
  return true;
}

void Variables::InternalSwap(Variables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Variables, _impl_.value_2_)
      + sizeof(Variables::_impl_.value_2_)
      - PROTOBUF_FIELD_OFFSET(Variables, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Variables::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5frpc_2eproto_getter, &descriptor_table_test_5frpc_2eproto_once,
      file_level_metadata_test_5frpc_2eproto[0]);
}

// ===================================================================

class Operator::_Internal {
 public:
  static const ::testrpc::Action& action_(const Operator* msg);
  static const ::testrpc::Variables& items(const Operator* msg);
};

const ::testrpc::Action&
Operator::_Internal::action_(const Operator* msg) {
  return *msg->_impl_.action__;
}
const ::testrpc::Variables&
Operator::_Internal::items(const Operator* msg) {
  return *msg->_impl_.items_;
}
Operator::Operator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testrpc.Operator)
}
Operator::Operator(const Operator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Operator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.action__){nullptr}
    , decltype(_impl_.items_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_action_()) {
    _this->_impl_.action__ = new ::testrpc::Action(*from._impl_.action__);
  }
  if (from._internal_has_items()) {
    _this->_impl_.items_ = new ::testrpc::Variables(*from._impl_.items_);
  }
  // @@protoc_insertion_point(copy_constructor:testrpc.Operator)
}

inline void Operator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.action__){nullptr}
    , decltype(_impl_.items_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:testrpc.Operator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Operator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.action__;
  if (this != internal_default_instance()) delete _impl_.items_;
}

void Operator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:testrpc.Operator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.action__ != nullptr) {
    delete _impl_.action__;
  }
  _impl_.action__ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.items_ != nullptr) {
    delete _impl_.items_;
  }
  _impl_.items_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testrpc.Operator.name"));
        } else
          goto handle_unusual;
        continue;
      // .testrpc.Action action_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .testrpc.Variables items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_items(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testrpc.Operator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testrpc.Operator.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .testrpc.Action action_ = 2;
  if (this->_internal_has_action_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::action_(this),
        _Internal::action_(this).GetCachedSize(), target, stream);
  }

  // .testrpc.Variables items = 3;
  if (this->_internal_has_items()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::items(this),
        _Internal::items(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testrpc.Operator)
  return target;
}

size_t Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testrpc.Operator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .testrpc.Action action_ = 2;
  if (this->_internal_has_action_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.action__);
  }

  // .testrpc.Variables items = 3;
  if (this->_internal_has_items()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.items_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Operator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operator::GetClassData() const { return &_class_data_; }


void Operator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Operator*>(&to_msg);
  auto& from = static_cast<const Operator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testrpc.Operator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_action_()) {
    _this->_internal_mutable_action_()->::testrpc::Action::MergeFrom(
        from._internal_action_());
  }
  if (from._internal_has_items()) {
    _this->_internal_mutable_items()->::testrpc::Variables::MergeFrom(
        from._internal_items());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testrpc.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  return true;
}

void Operator::InternalSwap(Operator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operator, _impl_.items_)
      + sizeof(Operator::_impl_.items_)
      - PROTOBUF_FIELD_OFFSET(Operator, _impl_.action__)>(
          reinterpret_cast<char*>(&_impl_.action__),
          reinterpret_cast<char*>(&other->_impl_.action__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Operator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5frpc_2eproto_getter, &descriptor_table_test_5frpc_2eproto_once,
      file_level_metadata_test_5frpc_2eproto[1]);
}

// ===================================================================

class Action::_Internal {
 public:
};

Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testrpc.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Action* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result__ = from._impl_.result__;
  // @@protoc_insertion_point(copy_constructor:testrpc.Action)
}

inline void Action::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:testrpc.Action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Action::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:testrpc.Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testrpc.Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result_ = 1;
  if (this->_internal_result_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testrpc.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testrpc.Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result_ = 1;
  if (this->_internal_result_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }


void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Action*>(&to_msg);
  auto& from = static_cast<const Action&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testrpc.Action)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result_() != 0) {
    _this->_internal_set_result_(from._internal_result_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testrpc.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result__, other->_impl_.result__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5frpc_2eproto_getter, &descriptor_table_test_5frpc_2eproto_once,
      file_level_metadata_test_5frpc_2eproto[2]);
}

// ===================================================================

class SummNote::_Internal {
 public:
  static const ::testrpc::Variables& type_operator(const SummNote* msg);
};

const ::testrpc::Variables&
SummNote::_Internal::type_operator(const SummNote* msg) {
  return *msg->_impl_.type_operator_;
}
SummNote::SummNote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testrpc.SummNote)
}
SummNote::SummNote(const SummNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummNote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_operator_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type_operator()) {
    _this->_impl_.type_operator_ = new ::testrpc::Variables(*from._impl_.type_operator_);
  }
  // @@protoc_insertion_point(copy_constructor:testrpc.SummNote)
}

inline void SummNote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_operator_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SummNote::~SummNote() {
  // @@protoc_insertion_point(destructor:testrpc.SummNote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummNote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_operator_;
}

void SummNote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummNote::Clear() {
// @@protoc_insertion_point(message_clear_start:testrpc.SummNote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.type_operator_ != nullptr) {
    delete _impl_.type_operator_;
  }
  _impl_.type_operator_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummNote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .testrpc.Variables type_operator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_operator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "testrpc.SummNote.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummNote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testrpc.SummNote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .testrpc.Variables type_operator = 1;
  if (this->_internal_has_type_operator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type_operator(this),
        _Internal::type_operator(this).GetCachedSize(), target, stream);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testrpc.SummNote.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testrpc.SummNote)
  return target;
}

size_t SummNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testrpc.SummNote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .testrpc.Variables type_operator = 1;
  if (this->_internal_has_type_operator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_operator_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummNote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummNote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummNote::GetClassData() const { return &_class_data_; }


void SummNote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummNote*>(&to_msg);
  auto& from = static_cast<const SummNote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testrpc.SummNote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_type_operator()) {
    _this->_internal_mutable_type_operator()->::testrpc::Variables::MergeFrom(
        from._internal_type_operator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummNote::CopyFrom(const SummNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testrpc.SummNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummNote::IsInitialized() const {
  return true;
}

void SummNote::InternalSwap(SummNote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.type_operator_, other->_impl_.type_operator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummNote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5frpc_2eproto_getter, &descriptor_table_test_5frpc_2eproto_once,
      file_level_metadata_test_5frpc_2eproto[3]);
}

// ===================================================================

class OperatorsSummary::_Internal {
 public:
};

OperatorsSummary::OperatorsSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:testrpc.OperatorsSummary)
}
OperatorsSummary::OperatorsSummary(const OperatorsSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperatorsSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_count_){}
    , decltype(_impl_.feature_count_){}
    , decltype(_impl_.elapsed_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.variables_count_, &from._impl_.variables_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.elapsed_time_) -
    reinterpret_cast<char*>(&_impl_.variables_count_)) + sizeof(_impl_.elapsed_time_));
  // @@protoc_insertion_point(copy_constructor:testrpc.OperatorsSummary)
}

inline void OperatorsSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_count_){0}
    , decltype(_impl_.feature_count_){0}
    , decltype(_impl_.elapsed_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperatorsSummary::~OperatorsSummary() {
  // @@protoc_insertion_point(destructor:testrpc.OperatorsSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperatorsSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OperatorsSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperatorsSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:testrpc.OperatorsSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.variables_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.elapsed_time_) -
      reinterpret_cast<char*>(&_impl_.variables_count_)) + sizeof(_impl_.elapsed_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatorsSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 variables_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.variables_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 feature_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.feature_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 elapsed_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperatorsSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testrpc.OperatorsSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 variables_count = 1;
  if (this->_internal_variables_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_variables_count(), target);
  }

  // int32 feature_count = 2;
  if (this->_internal_feature_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_feature_count(), target);
  }

  // int32 elapsed_time = 3;
  if (this->_internal_elapsed_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_elapsed_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testrpc.OperatorsSummary)
  return target;
}

size_t OperatorsSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testrpc.OperatorsSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 variables_count = 1;
  if (this->_internal_variables_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_variables_count());
  }

  // int32 feature_count = 2;
  if (this->_internal_feature_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_feature_count());
  }

  // int32 elapsed_time = 3;
  if (this->_internal_elapsed_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_elapsed_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatorsSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperatorsSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatorsSummary::GetClassData() const { return &_class_data_; }


void OperatorsSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperatorsSummary*>(&to_msg);
  auto& from = static_cast<const OperatorsSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:testrpc.OperatorsSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_variables_count() != 0) {
    _this->_internal_set_variables_count(from._internal_variables_count());
  }
  if (from._internal_feature_count() != 0) {
    _this->_internal_set_feature_count(from._internal_feature_count());
  }
  if (from._internal_elapsed_time() != 0) {
    _this->_internal_set_elapsed_time(from._internal_elapsed_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatorsSummary::CopyFrom(const OperatorsSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testrpc.OperatorsSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorsSummary::IsInitialized() const {
  return true;
}

void OperatorsSummary::InternalSwap(OperatorsSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperatorsSummary, _impl_.elapsed_time_)
      + sizeof(OperatorsSummary::_impl_.elapsed_time_)
      - PROTOBUF_FIELD_OFFSET(OperatorsSummary, _impl_.variables_count_)>(
          reinterpret_cast<char*>(&_impl_.variables_count_),
          reinterpret_cast<char*>(&other->_impl_.variables_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatorsSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5frpc_2eproto_getter, &descriptor_table_test_5frpc_2eproto_once,
      file_level_metadata_test_5frpc_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::testrpc::Variables*
Arena::CreateMaybeMessage< ::testrpc::Variables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testrpc::Variables >(arena);
}
template<> PROTOBUF_NOINLINE ::testrpc::Operator*
Arena::CreateMaybeMessage< ::testrpc::Operator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testrpc::Operator >(arena);
}
template<> PROTOBUF_NOINLINE ::testrpc::Action*
Arena::CreateMaybeMessage< ::testrpc::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testrpc::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::testrpc::SummNote*
Arena::CreateMaybeMessage< ::testrpc::SummNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testrpc::SummNote >(arena);
}
template<> PROTOBUF_NOINLINE ::testrpc::OperatorsSummary*
Arena::CreateMaybeMessage< ::testrpc::OperatorsSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::testrpc::OperatorsSummary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
