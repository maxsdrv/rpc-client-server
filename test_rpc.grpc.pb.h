// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test_rpc.proto
#ifndef GRPC_test_5frpc_2eproto__INCLUDED
#define GRPC_test_5frpc_2eproto__INCLUDED

#include "test_rpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace testrpc {

class TestgRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "testrpc.TestgRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status get_result(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::testrpc::Operator* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testrpc::Operator>> Asyncget_result(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testrpc::Operator>>(Asyncget_resultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testrpc::Operator>> PrepareAsyncget_result(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::testrpc::Operator>>(PrepareAsyncget_resultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::testrpc::Variables>> record_result(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::testrpc::Variables>>(record_resultRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::testrpc::Variables>> Asyncrecord_result(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::testrpc::Variables>>(Asyncrecord_resultRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::testrpc::Variables>> PrepareAsyncrecord_result(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::testrpc::Variables>>(PrepareAsyncrecord_resultRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>> result_chat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>>(result_chatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>> Asyncresult_chat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>>(Asyncresult_chatRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>> PrepareAsyncresult_chat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>>(PrepareAsyncresult_chatRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void get_result(::grpc::ClientContext* context, const ::testrpc::Variables* request, ::testrpc::Operator* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_result(::grpc::ClientContext* context, const ::testrpc::Variables* request, ::testrpc::Operator* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void record_result(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::ClientWriteReactor< ::testrpc::Variables>* reactor) = 0;
      virtual void result_chat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::testrpc::SummNote,::testrpc::SummNote>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testrpc::Operator>* Asyncget_resultRaw(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::testrpc::Operator>* PrepareAsyncget_resultRaw(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::testrpc::Variables>* record_resultRaw(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::testrpc::Variables>* Asyncrecord_resultRaw(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::testrpc::Variables>* PrepareAsyncrecord_resultRaw(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>* result_chatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>* Asyncresult_chatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::testrpc::SummNote, ::testrpc::SummNote>* PrepareAsyncresult_chatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status get_result(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::testrpc::Operator* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testrpc::Operator>> Asyncget_result(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testrpc::Operator>>(Asyncget_resultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testrpc::Operator>> PrepareAsyncget_result(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::testrpc::Operator>>(PrepareAsyncget_resultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::testrpc::Variables>> record_result(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::testrpc::Variables>>(record_resultRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::testrpc::Variables>> Asyncrecord_result(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::testrpc::Variables>>(Asyncrecord_resultRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::testrpc::Variables>> PrepareAsyncrecord_result(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::testrpc::Variables>>(PrepareAsyncrecord_resultRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>> result_chat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>>(result_chatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>> Asyncresult_chat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>>(Asyncresult_chatRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>> PrepareAsyncresult_chat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>>(PrepareAsyncresult_chatRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void get_result(::grpc::ClientContext* context, const ::testrpc::Variables* request, ::testrpc::Operator* response, std::function<void(::grpc::Status)>) override;
      void get_result(::grpc::ClientContext* context, const ::testrpc::Variables* request, ::testrpc::Operator* response, ::grpc::ClientUnaryReactor* reactor) override;
      void record_result(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::ClientWriteReactor< ::testrpc::Variables>* reactor) override;
      void result_chat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::testrpc::SummNote,::testrpc::SummNote>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::testrpc::Operator>* Asyncget_resultRaw(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::testrpc::Operator>* PrepareAsyncget_resultRaw(::grpc::ClientContext* context, const ::testrpc::Variables& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::testrpc::Variables>* record_resultRaw(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response) override;
    ::grpc::ClientAsyncWriter< ::testrpc::Variables>* Asyncrecord_resultRaw(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::testrpc::Variables>* PrepareAsyncrecord_resultRaw(::grpc::ClientContext* context, ::testrpc::OperatorsSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* result_chatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* Asyncresult_chatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* PrepareAsyncresult_chatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_result_;
    const ::grpc::internal::RpcMethod rpcmethod_record_result_;
    const ::grpc::internal::RpcMethod rpcmethod_result_chat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status get_result(::grpc::ServerContext* context, const ::testrpc::Variables* request, ::testrpc::Operator* response);
    virtual ::grpc::Status record_result(::grpc::ServerContext* context, ::grpc::ServerReader< ::testrpc::Variables>* reader, ::testrpc::OperatorsSummary* response);
    virtual ::grpc::Status result_chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_result() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_result(::grpc::ServerContext* /*context*/, const ::testrpc::Variables* /*request*/, ::testrpc::Operator* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_result(::grpc::ServerContext* context, ::testrpc::Variables* request, ::grpc::ServerAsyncResponseWriter< ::testrpc::Operator>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_record_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_record_result() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_record_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status record_result(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::testrpc::Variables>* /*reader*/, ::testrpc::OperatorsSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecord_result(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::testrpc::OperatorsSummary, ::testrpc::Variables>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_result_chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_result_chat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_result_chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result_chat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresult_chat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_result<WithAsyncMethod_record_result<WithAsyncMethod_result_chat<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_get_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_result() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::testrpc::Variables, ::testrpc::Operator>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::testrpc::Variables* request, ::testrpc::Operator* response) { return this->get_result(context, request, response); }));}
    void SetMessageAllocatorFor_get_result(
        ::grpc::MessageAllocator< ::testrpc::Variables, ::testrpc::Operator>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::testrpc::Variables, ::testrpc::Operator>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_result(::grpc::ServerContext* /*context*/, const ::testrpc::Variables* /*request*/, ::testrpc::Operator* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_result(
      ::grpc::CallbackServerContext* /*context*/, const ::testrpc::Variables* /*request*/, ::testrpc::Operator* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_record_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_record_result() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::testrpc::Variables, ::testrpc::OperatorsSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::testrpc::OperatorsSummary* response) { return this->record_result(context, response); }));
    }
    ~WithCallbackMethod_record_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status record_result(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::testrpc::Variables>* /*reader*/, ::testrpc::OperatorsSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::testrpc::Variables>* record_result(
      ::grpc::CallbackServerContext* /*context*/, ::testrpc::OperatorsSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_result_chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_result_chat() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::testrpc::SummNote, ::testrpc::SummNote>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->result_chat(context); }));
    }
    ~WithCallbackMethod_result_chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result_chat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::testrpc::SummNote, ::testrpc::SummNote>* result_chat(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_get_result<WithCallbackMethod_record_result<WithCallbackMethod_result_chat<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_get_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_result() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_result(::grpc::ServerContext* /*context*/, const ::testrpc::Variables* /*request*/, ::testrpc::Operator* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_record_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_record_result() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_record_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status record_result(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::testrpc::Variables>* /*reader*/, ::testrpc::OperatorsSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_result_chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_result_chat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_result_chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result_chat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_result() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_result(::grpc::ServerContext* /*context*/, const ::testrpc::Variables* /*request*/, ::testrpc::Operator* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_result(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_record_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_record_result() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_record_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status record_result(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::testrpc::Variables>* /*reader*/, ::testrpc::OperatorsSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecord_result(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_result_chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_result_chat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_result_chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result_chat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresult_chat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_result() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_result(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_result(::grpc::ServerContext* /*context*/, const ::testrpc::Variables* /*request*/, ::testrpc::Operator* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_result(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_record_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_record_result() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->record_result(context, response); }));
    }
    ~WithRawCallbackMethod_record_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status record_result(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::testrpc::Variables>* /*reader*/, ::testrpc::OperatorsSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* record_result(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_result_chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_result_chat() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->result_chat(context); }));
    }
    ~WithRawCallbackMethod_result_chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result_chat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::testrpc::SummNote, ::testrpc::SummNote>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* result_chat(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_result() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::testrpc::Variables, ::testrpc::Operator>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::testrpc::Variables, ::testrpc::Operator>* streamer) {
                       return this->Streamedget_result(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_result(::grpc::ServerContext* /*context*/, const ::testrpc::Variables* /*request*/, ::testrpc::Operator* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_result(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::testrpc::Variables,::testrpc::Operator>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_result<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_result<Service > StreamedService;
};

}  // namespace testrpc


#endif  // GRPC_test_5frpc_2eproto__INCLUDED
