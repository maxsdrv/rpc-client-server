/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "test_rpc.qpb.h"
#include <QQmlEngine>
using namespace QtProtobuf;

namespace qtprotobuf {
namespace testrpc {
static QtProtobuf::ProtoTypeRegistrar<EchoRequest> ProtoTypeRegistrarEchoRequest(qRegisterProtobufType<EchoRequest>);
EchoRequest::~EchoRequest()
{}

const QtProtobuf::QProtobufMetaObject EchoRequest::protobufMetaObject = QtProtobuf::QProtobufMetaObject(EchoRequest::staticMetaObject, EchoRequest::propertyOrdering);
const QtProtobuf::QProtobufPropertyOrdering EchoRequest::propertyOrdering = {{1, {1, "message"}}};

void EchoRequest::registerTypes()
{
    qRegisterMetaType<EchoRequest>("qtprotobuf::testrpc::EchoRequest");
    qRegisterMetaType<EchoRequest*>("qtprotobuf::testrpc::EchoRequest*");
    qRegisterMetaType<EchoRequestRepeated>("qtprotobuf::testrpc::EchoRequestRepeated");
    qRegisterMetaType<QQmlListProperty<qtprotobuf::testrpc::EchoRequest>>("QQmlListProperty<qtprotobuf::testrpc::EchoRequest>");
    qmlRegisterType<qtprotobuf::testrpc::EchoRequest>("qtprotobuf.testrpc", 1, 0, "EchoRequest");
}
EchoRequest::EchoRequest(QObject *parent) : QObject(parent)
{
}
EchoRequest::EchoRequest(const QString &message,QObject *parent) : QObject(parent)
    , m_message(message)
{
}
EchoRequest::EchoRequest(const EchoRequest &other) : QObject()
{
    setMessage(other.m_message);
}
EchoRequest &EchoRequest::operator =(const EchoRequest &other)
{
    setMessage(other.m_message);
    return *this;
}
EchoRequest::EchoRequest(EchoRequest &&other) : QObject()
{
    m_message = std::move(other.m_message);
    other.messageChanged();
}
EchoRequest &EchoRequest::operator =(EchoRequest &&other)
{
    if (m_message != other.m_message) {
        m_message = std::move(other.m_message);
        messageChanged();
        other.messageChanged();
    }return *this;
}
bool EchoRequest::operator ==(const EchoRequest &other) const
{
    return m_message == other.m_message;
}
bool EchoRequest::operator !=(const EchoRequest &other) const
{
    return !this->operator ==(other);
}

void EchoRequest::setMessage(const QString &message)
{
    if (m_message != message) {
        m_message = message;
        messageChanged();
    }
}


}
}


namespace qtprotobuf {
namespace testrpc {
static QtProtobuf::ProtoTypeRegistrar<EchoResponse> ProtoTypeRegistrarEchoResponse(qRegisterProtobufType<EchoResponse>);
EchoResponse::~EchoResponse()
{}

const QtProtobuf::QProtobufMetaObject EchoResponse::protobufMetaObject = QtProtobuf::QProtobufMetaObject(EchoResponse::staticMetaObject, EchoResponse::propertyOrdering);
const QtProtobuf::QProtobufPropertyOrdering EchoResponse::propertyOrdering = {{1, {1, "message"}}};

void EchoResponse::registerTypes()
{
    qRegisterMetaType<EchoResponse>("qtprotobuf::testrpc::EchoResponse");
    qRegisterMetaType<EchoResponse*>("qtprotobuf::testrpc::EchoResponse*");
    qRegisterMetaType<EchoResponseRepeated>("qtprotobuf::testrpc::EchoResponseRepeated");
    qRegisterMetaType<QQmlListProperty<qtprotobuf::testrpc::EchoResponse>>("QQmlListProperty<qtprotobuf::testrpc::EchoResponse>");
    qmlRegisterType<qtprotobuf::testrpc::EchoResponse>("qtprotobuf.testrpc", 1, 0, "EchoResponse");
}
EchoResponse::EchoResponse(QObject *parent) : QObject(parent)
{
}
EchoResponse::EchoResponse(const QString &message,QObject *parent) : QObject(parent)
    , m_message(message)
{
}
EchoResponse::EchoResponse(const EchoResponse &other) : QObject()
{
    setMessage(other.m_message);
}
EchoResponse &EchoResponse::operator =(const EchoResponse &other)
{
    setMessage(other.m_message);
    return *this;
}
EchoResponse::EchoResponse(EchoResponse &&other) : QObject()
{
    m_message = std::move(other.m_message);
    other.messageChanged();
}
EchoResponse &EchoResponse::operator =(EchoResponse &&other)
{
    if (m_message != other.m_message) {
        m_message = std::move(other.m_message);
        messageChanged();
        other.messageChanged();
    }return *this;
}
bool EchoResponse::operator ==(const EchoResponse &other) const
{
    return m_message == other.m_message;
}
bool EchoResponse::operator !=(const EchoResponse &other) const
{
    return !this->operator ==(other);
}

void EchoResponse::setMessage(const QString &message)
{
    if (m_message != message) {
        m_message = message;
        messageChanged();
    }
}


}
}

