/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#pragma once

#include <QObject>
#include <QMetaType>
#include <QList>
#include <QProtobufObject>
#include <QProtobufLazyMessagePointer>
#include <QSharedPointer>

#include <memory>
#include <unordered_map>

#include <QtQml/QQmlListProperty>
#include <QQmlListPropertyConstructor>

#include <QByteArray>
#include <QString>

namespace QtProtobuf {
class QColor;
using QColorRepeated = QList<QSharedPointer<QColor>>;

}


namespace QtProtobuf {
class QMatrix4x4;
using QMatrix4x4Repeated = QList<QSharedPointer<QMatrix4x4>>;

}


namespace QtProtobuf {
class QVector2D;
using QVector2DRepeated = QList<QSharedPointer<QVector2D>>;

}


namespace QtProtobuf {
class QVector3D;
using QVector3DRepeated = QList<QSharedPointer<QVector3D>>;

}


namespace QtProtobuf {
class QVector4D;
using QVector4DRepeated = QList<QSharedPointer<QVector4D>>;

}


namespace QtProtobuf {
class QTransform;
using QTransformRepeated = QList<QSharedPointer<QTransform>>;

}


namespace QtProtobuf {
class QQuaternion;
using QQuaternionRepeated = QList<QSharedPointer<QQuaternion>>;

}


namespace QtProtobuf {
class QImage;
using QImageRepeated = QList<QSharedPointer<QImage>>;

}


namespace QtProtobuf {
namespace QColor_QtProtobufNested {
}

class QColor : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(QColor)
    Q_PROPERTY(QtProtobuf::uint32 rgba READ rgba WRITE setRgba NOTIFY rgbaChanged SCRIPTABLE true)

public:
    QColor(QObject *parent = nullptr);
    QColor(QtProtobuf::uint32 rgba,QObject *parent = nullptr);
    virtual ~QColor();
    QColor(const QColor &other);
    QColor &operator =(const QColor &other);
    QColor(QColor &&other);
    QColor &operator =(QColor &&other);
    bool operator ==(const QColor &other) const;
    bool operator !=(const QColor &other) const;

    QtProtobuf::uint32 rgba() const {
        return m_rgba;
    }

    void setRgba(const QtProtobuf::uint32 &rgba) {
        if (m_rgba != rgba) {
            m_rgba = rgba;
            rgbaChanged();
        }
    }

    static void registerTypes();

signals:
    void rgbaChanged();

private:

private:
    QtProtobuf::uint32 m_rgba;
};

using QColorRepeated = QList<QSharedPointer<QColor>>;

}

Q_DECLARE_METATYPE(QtProtobuf::QColor)
Q_DECLARE_METATYPE(QtProtobuf::QColorRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<QtProtobuf::QColor>)

namespace QtProtobuf {
namespace QMatrix4x4_QtProtobufNested {
}

class QMatrix4x4 : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(QMatrix4x4)
    Q_PROPERTY(float m11 READ m11 WRITE setM11 NOTIFY m11Changed SCRIPTABLE true)
    Q_PROPERTY(float m12 READ m12 WRITE setM12 NOTIFY m12Changed SCRIPTABLE true)
    Q_PROPERTY(float m13 READ m13 WRITE setM13 NOTIFY m13Changed SCRIPTABLE true)
    Q_PROPERTY(float m14 READ m14 WRITE setM14 NOTIFY m14Changed SCRIPTABLE true)
    Q_PROPERTY(float m21 READ m21 WRITE setM21 NOTIFY m21Changed SCRIPTABLE true)
    Q_PROPERTY(float m22 READ m22 WRITE setM22 NOTIFY m22Changed SCRIPTABLE true)
    Q_PROPERTY(float m23 READ m23 WRITE setM23 NOTIFY m23Changed SCRIPTABLE true)
    Q_PROPERTY(float m24 READ m24 WRITE setM24 NOTIFY m24Changed SCRIPTABLE true)
    Q_PROPERTY(float m31 READ m31 WRITE setM31 NOTIFY m31Changed SCRIPTABLE true)
    Q_PROPERTY(float m32 READ m32 WRITE setM32 NOTIFY m32Changed SCRIPTABLE true)
    Q_PROPERTY(float m33 READ m33 WRITE setM33 NOTIFY m33Changed SCRIPTABLE true)
    Q_PROPERTY(float m34 READ m34 WRITE setM34 NOTIFY m34Changed SCRIPTABLE true)
    Q_PROPERTY(float m41 READ m41 WRITE setM41 NOTIFY m41Changed SCRIPTABLE true)
    Q_PROPERTY(float m42 READ m42 WRITE setM42 NOTIFY m42Changed SCRIPTABLE true)
    Q_PROPERTY(float m43 READ m43 WRITE setM43 NOTIFY m43Changed SCRIPTABLE true)
    Q_PROPERTY(float m44 READ m44 WRITE setM44 NOTIFY m44Changed SCRIPTABLE true)

public:
    QMatrix4x4(QObject *parent = nullptr);
    QMatrix4x4(float m11,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,float m31,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,float m31,float m32,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,float m31,float m32,float m33,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,float m31,float m32,float m33,float m34,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,float m31,float m32,float m33,float m34,float m41,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,float m31,float m32,float m33,float m34,float m41,float m42,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,float m31,float m32,float m33,float m34,float m41,float m42,float m43,QObject *parent = nullptr);
    QMatrix4x4(float m11,float m12,float m13,float m14,float m21,float m22,float m23,float m24,float m31,float m32,float m33,float m34,float m41,float m42,float m43,float m44,QObject *parent = nullptr);
    virtual ~QMatrix4x4();
    QMatrix4x4(const QMatrix4x4 &other);
    QMatrix4x4 &operator =(const QMatrix4x4 &other);
    QMatrix4x4(QMatrix4x4 &&other);
    QMatrix4x4 &operator =(QMatrix4x4 &&other);
    bool operator ==(const QMatrix4x4 &other) const;
    bool operator !=(const QMatrix4x4 &other) const;

    float m11() const {
        return m_m11;
    }


    float m12() const {
        return m_m12;
    }


    float m13() const {
        return m_m13;
    }


    float m14() const {
        return m_m14;
    }


    float m21() const {
        return m_m21;
    }


    float m22() const {
        return m_m22;
    }


    float m23() const {
        return m_m23;
    }


    float m24() const {
        return m_m24;
    }


    float m31() const {
        return m_m31;
    }


    float m32() const {
        return m_m32;
    }


    float m33() const {
        return m_m33;
    }


    float m34() const {
        return m_m34;
    }


    float m41() const {
        return m_m41;
    }


    float m42() const {
        return m_m42;
    }


    float m43() const {
        return m_m43;
    }


    float m44() const {
        return m_m44;
    }

    void setM11(const float &m11) {
        if (m_m11 != m11) {
            m_m11 = m11;
            m11Changed();
        }
    }

    void setM12(const float &m12) {
        if (m_m12 != m12) {
            m_m12 = m12;
            m12Changed();
        }
    }

    void setM13(const float &m13) {
        if (m_m13 != m13) {
            m_m13 = m13;
            m13Changed();
        }
    }

    void setM14(const float &m14) {
        if (m_m14 != m14) {
            m_m14 = m14;
            m14Changed();
        }
    }

    void setM21(const float &m21) {
        if (m_m21 != m21) {
            m_m21 = m21;
            m21Changed();
        }
    }

    void setM22(const float &m22) {
        if (m_m22 != m22) {
            m_m22 = m22;
            m22Changed();
        }
    }

    void setM23(const float &m23) {
        if (m_m23 != m23) {
            m_m23 = m23;
            m23Changed();
        }
    }

    void setM24(const float &m24) {
        if (m_m24 != m24) {
            m_m24 = m24;
            m24Changed();
        }
    }

    void setM31(const float &m31) {
        if (m_m31 != m31) {
            m_m31 = m31;
            m31Changed();
        }
    }

    void setM32(const float &m32) {
        if (m_m32 != m32) {
            m_m32 = m32;
            m32Changed();
        }
    }

    void setM33(const float &m33) {
        if (m_m33 != m33) {
            m_m33 = m33;
            m33Changed();
        }
    }

    void setM34(const float &m34) {
        if (m_m34 != m34) {
            m_m34 = m34;
            m34Changed();
        }
    }

    void setM41(const float &m41) {
        if (m_m41 != m41) {
            m_m41 = m41;
            m41Changed();
        }
    }

    void setM42(const float &m42) {
        if (m_m42 != m42) {
            m_m42 = m42;
            m42Changed();
        }
    }

    void setM43(const float &m43) {
        if (m_m43 != m43) {
            m_m43 = m43;
            m43Changed();
        }
    }

    void setM44(const float &m44) {
        if (m_m44 != m44) {
            m_m44 = m44;
            m44Changed();
        }
    }

    static void registerTypes();

signals:
    void m11Changed();
    void m12Changed();
    void m13Changed();
    void m14Changed();
    void m21Changed();
    void m22Changed();
    void m23Changed();
    void m24Changed();
    void m31Changed();
    void m32Changed();
    void m33Changed();
    void m34Changed();
    void m41Changed();
    void m42Changed();
    void m43Changed();
    void m44Changed();

private:

private:
    float m_m11;
    float m_m12;
    float m_m13;
    float m_m14;
    float m_m21;
    float m_m22;
    float m_m23;
    float m_m24;
    float m_m31;
    float m_m32;
    float m_m33;
    float m_m34;
    float m_m41;
    float m_m42;
    float m_m43;
    float m_m44;
};

using QMatrix4x4Repeated = QList<QSharedPointer<QMatrix4x4>>;

}

Q_DECLARE_METATYPE(QtProtobuf::QMatrix4x4)
Q_DECLARE_METATYPE(QtProtobuf::QMatrix4x4Repeated)
Q_DECLARE_METATYPE(QQmlListProperty<QtProtobuf::QMatrix4x4>)

namespace QtProtobuf {
namespace QVector2D_QtProtobufNested {
}

class QVector2D : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(QVector2D)
    Q_PROPERTY(float xpos READ xpos WRITE setXpos NOTIFY xposChanged SCRIPTABLE true)
    Q_PROPERTY(float ypos READ ypos WRITE setYpos NOTIFY yposChanged SCRIPTABLE true)

public:
    QVector2D(QObject *parent = nullptr);
    QVector2D(float xpos,QObject *parent = nullptr);
    QVector2D(float xpos,float ypos,QObject *parent = nullptr);
    virtual ~QVector2D();
    QVector2D(const QVector2D &other);
    QVector2D &operator =(const QVector2D &other);
    QVector2D(QVector2D &&other);
    QVector2D &operator =(QVector2D &&other);
    bool operator ==(const QVector2D &other) const;
    bool operator !=(const QVector2D &other) const;

    float xpos() const {
        return m_xpos;
    }


    float ypos() const {
        return m_ypos;
    }

    void setXpos(const float &xpos) {
        if (m_xpos != xpos) {
            m_xpos = xpos;
            xposChanged();
        }
    }

    void setYpos(const float &ypos) {
        if (m_ypos != ypos) {
            m_ypos = ypos;
            yposChanged();
        }
    }

    static void registerTypes();

signals:
    void xposChanged();
    void yposChanged();

private:

private:
    float m_xpos;
    float m_ypos;
};

using QVector2DRepeated = QList<QSharedPointer<QVector2D>>;

}

Q_DECLARE_METATYPE(QtProtobuf::QVector2D)
Q_DECLARE_METATYPE(QtProtobuf::QVector2DRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<QtProtobuf::QVector2D>)

namespace QtProtobuf {
namespace QVector3D_QtProtobufNested {
}

class QVector3D : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(QVector3D)
    Q_PROPERTY(float xpos READ xpos WRITE setXpos NOTIFY xposChanged SCRIPTABLE true)
    Q_PROPERTY(float ypos READ ypos WRITE setYpos NOTIFY yposChanged SCRIPTABLE true)
    Q_PROPERTY(float zpos READ zpos WRITE setZpos NOTIFY zposChanged SCRIPTABLE true)

public:
    QVector3D(QObject *parent = nullptr);
    QVector3D(float xpos,QObject *parent = nullptr);
    QVector3D(float xpos,float ypos,QObject *parent = nullptr);
    QVector3D(float xpos,float ypos,float zpos,QObject *parent = nullptr);
    virtual ~QVector3D();
    QVector3D(const QVector3D &other);
    QVector3D &operator =(const QVector3D &other);
    QVector3D(QVector3D &&other);
    QVector3D &operator =(QVector3D &&other);
    bool operator ==(const QVector3D &other) const;
    bool operator !=(const QVector3D &other) const;

    float xpos() const {
        return m_xpos;
    }


    float ypos() const {
        return m_ypos;
    }


    float zpos() const {
        return m_zpos;
    }

    void setXpos(const float &xpos) {
        if (m_xpos != xpos) {
            m_xpos = xpos;
            xposChanged();
        }
    }

    void setYpos(const float &ypos) {
        if (m_ypos != ypos) {
            m_ypos = ypos;
            yposChanged();
        }
    }

    void setZpos(const float &zpos) {
        if (m_zpos != zpos) {
            m_zpos = zpos;
            zposChanged();
        }
    }

    static void registerTypes();

signals:
    void xposChanged();
    void yposChanged();
    void zposChanged();

private:

private:
    float m_xpos;
    float m_ypos;
    float m_zpos;
};

using QVector3DRepeated = QList<QSharedPointer<QVector3D>>;

}

Q_DECLARE_METATYPE(QtProtobuf::QVector3D)
Q_DECLARE_METATYPE(QtProtobuf::QVector3DRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<QtProtobuf::QVector3D>)

namespace QtProtobuf {
namespace QVector4D_QtProtobufNested {
}

class QVector4D : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(QVector4D)
    Q_PROPERTY(float xpos READ xpos WRITE setXpos NOTIFY xposChanged SCRIPTABLE true)
    Q_PROPERTY(float ypos READ ypos WRITE setYpos NOTIFY yposChanged SCRIPTABLE true)
    Q_PROPERTY(float zpos READ zpos WRITE setZpos NOTIFY zposChanged SCRIPTABLE true)
    Q_PROPERTY(float wpos READ wpos WRITE setWpos NOTIFY wposChanged SCRIPTABLE true)

public:
    QVector4D(QObject *parent = nullptr);
    QVector4D(float xpos,QObject *parent = nullptr);
    QVector4D(float xpos,float ypos,QObject *parent = nullptr);
    QVector4D(float xpos,float ypos,float zpos,QObject *parent = nullptr);
    QVector4D(float xpos,float ypos,float zpos,float wpos,QObject *parent = nullptr);
    virtual ~QVector4D();
    QVector4D(const QVector4D &other);
    QVector4D &operator =(const QVector4D &other);
    QVector4D(QVector4D &&other);
    QVector4D &operator =(QVector4D &&other);
    bool operator ==(const QVector4D &other) const;
    bool operator !=(const QVector4D &other) const;

    float xpos() const {
        return m_xpos;
    }


    float ypos() const {
        return m_ypos;
    }


    float zpos() const {
        return m_zpos;
    }


    float wpos() const {
        return m_wpos;
    }

    void setXpos(const float &xpos) {
        if (m_xpos != xpos) {
            m_xpos = xpos;
            xposChanged();
        }
    }

    void setYpos(const float &ypos) {
        if (m_ypos != ypos) {
            m_ypos = ypos;
            yposChanged();
        }
    }

    void setZpos(const float &zpos) {
        if (m_zpos != zpos) {
            m_zpos = zpos;
            zposChanged();
        }
    }

    void setWpos(const float &wpos) {
        if (m_wpos != wpos) {
            m_wpos = wpos;
            wposChanged();
        }
    }

    static void registerTypes();

signals:
    void xposChanged();
    void yposChanged();
    void zposChanged();
    void wposChanged();

private:

private:
    float m_xpos;
    float m_ypos;
    float m_zpos;
    float m_wpos;
};

using QVector4DRepeated = QList<QSharedPointer<QVector4D>>;

}

Q_DECLARE_METATYPE(QtProtobuf::QVector4D)
Q_DECLARE_METATYPE(QtProtobuf::QVector4DRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<QtProtobuf::QVector4D>)

namespace QtProtobuf {
namespace QTransform_QtProtobufNested {
}

class QTransform : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(QTransform)
    Q_PROPERTY(double m11 READ m11 WRITE setM11 NOTIFY m11Changed SCRIPTABLE true)
    Q_PROPERTY(double m12 READ m12 WRITE setM12 NOTIFY m12Changed SCRIPTABLE true)
    Q_PROPERTY(double m13 READ m13 WRITE setM13 NOTIFY m13Changed SCRIPTABLE true)
    Q_PROPERTY(double m21 READ m21 WRITE setM21 NOTIFY m21Changed SCRIPTABLE true)
    Q_PROPERTY(double m22 READ m22 WRITE setM22 NOTIFY m22Changed SCRIPTABLE true)
    Q_PROPERTY(double m23 READ m23 WRITE setM23 NOTIFY m23Changed SCRIPTABLE true)
    Q_PROPERTY(double m31 READ m31 WRITE setM31 NOTIFY m31Changed SCRIPTABLE true)
    Q_PROPERTY(double m32 READ m32 WRITE setM32 NOTIFY m32Changed SCRIPTABLE true)
    Q_PROPERTY(double m33 READ m33 WRITE setM33 NOTIFY m33Changed SCRIPTABLE true)

public:
    QTransform(QObject *parent = nullptr);
    QTransform(double m11,QObject *parent = nullptr);
    QTransform(double m11,double m12,QObject *parent = nullptr);
    QTransform(double m11,double m12,double m13,QObject *parent = nullptr);
    QTransform(double m11,double m12,double m13,double m21,QObject *parent = nullptr);
    QTransform(double m11,double m12,double m13,double m21,double m22,QObject *parent = nullptr);
    QTransform(double m11,double m12,double m13,double m21,double m22,double m23,QObject *parent = nullptr);
    QTransform(double m11,double m12,double m13,double m21,double m22,double m23,double m31,QObject *parent = nullptr);
    QTransform(double m11,double m12,double m13,double m21,double m22,double m23,double m31,double m32,QObject *parent = nullptr);
    QTransform(double m11,double m12,double m13,double m21,double m22,double m23,double m31,double m32,double m33,QObject *parent = nullptr);
    virtual ~QTransform();
    QTransform(const QTransform &other);
    QTransform &operator =(const QTransform &other);
    QTransform(QTransform &&other);
    QTransform &operator =(QTransform &&other);
    bool operator ==(const QTransform &other) const;
    bool operator !=(const QTransform &other) const;

    double m11() const {
        return m_m11;
    }


    double m12() const {
        return m_m12;
    }


    double m13() const {
        return m_m13;
    }


    double m21() const {
        return m_m21;
    }


    double m22() const {
        return m_m22;
    }


    double m23() const {
        return m_m23;
    }


    double m31() const {
        return m_m31;
    }


    double m32() const {
        return m_m32;
    }


    double m33() const {
        return m_m33;
    }

    void setM11(const double &m11) {
        if (m_m11 != m11) {
            m_m11 = m11;
            m11Changed();
        }
    }

    void setM12(const double &m12) {
        if (m_m12 != m12) {
            m_m12 = m12;
            m12Changed();
        }
    }

    void setM13(const double &m13) {
        if (m_m13 != m13) {
            m_m13 = m13;
            m13Changed();
        }
    }

    void setM21(const double &m21) {
        if (m_m21 != m21) {
            m_m21 = m21;
            m21Changed();
        }
    }

    void setM22(const double &m22) {
        if (m_m22 != m22) {
            m_m22 = m22;
            m22Changed();
        }
    }

    void setM23(const double &m23) {
        if (m_m23 != m23) {
            m_m23 = m23;
            m23Changed();
        }
    }

    void setM31(const double &m31) {
        if (m_m31 != m31) {
            m_m31 = m31;
            m31Changed();
        }
    }

    void setM32(const double &m32) {
        if (m_m32 != m32) {
            m_m32 = m32;
            m32Changed();
        }
    }

    void setM33(const double &m33) {
        if (m_m33 != m33) {
            m_m33 = m33;
            m33Changed();
        }
    }

    static void registerTypes();

signals:
    void m11Changed();
    void m12Changed();
    void m13Changed();
    void m21Changed();
    void m22Changed();
    void m23Changed();
    void m31Changed();
    void m32Changed();
    void m33Changed();

private:

private:
    double m_m11;
    double m_m12;
    double m_m13;
    double m_m21;
    double m_m22;
    double m_m23;
    double m_m31;
    double m_m32;
    double m_m33;
};

using QTransformRepeated = QList<QSharedPointer<QTransform>>;

}

Q_DECLARE_METATYPE(QtProtobuf::QTransform)
Q_DECLARE_METATYPE(QtProtobuf::QTransformRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<QtProtobuf::QTransform>)

namespace QtProtobuf {
namespace QQuaternion_QtProtobufNested {
}

class QQuaternion : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(QQuaternion)
    Q_PROPERTY(float scalar READ scalar WRITE setScalar NOTIFY scalarChanged SCRIPTABLE true)
    Q_PROPERTY(QtProtobuf::QVector3D *vector READ vector_p WRITE setVector_p NOTIFY vectorChanged)

public:
    QQuaternion(QObject *parent = nullptr);
    QQuaternion(float scalar,QObject *parent = nullptr);
    QQuaternion(float scalar,const QVector3D &vector,QObject *parent = nullptr);
    virtual ~QQuaternion();
    QQuaternion(const QQuaternion &other);
    QQuaternion &operator =(const QQuaternion &other);
    QQuaternion(QQuaternion &&other);
    QQuaternion &operator =(QQuaternion &&other);
    bool operator ==(const QQuaternion &other) const;
    bool operator !=(const QQuaternion &other) const;

    float scalar() const {
        return m_scalar;
    }


    const QVector3D &vector() const;
    void setScalar(const float &scalar) {
        if (m_scalar != scalar) {
            m_scalar = scalar;
            scalarChanged();
        }
    }

    void setVector(const QVector3D &vector);
    static void registerTypes();

signals:
    void scalarChanged();
    void vectorChanged();

private:
    QVector3D *vector_p() const;
    void setVector_p(QVector3D *vector);

private:
    float m_scalar;
    QProtobufLazyMessagePointer<QVector3D> m_vector;
};

using QQuaternionRepeated = QList<QSharedPointer<QQuaternion>>;

}

Q_DECLARE_METATYPE(QtProtobuf::QQuaternion)
Q_DECLARE_METATYPE(QtProtobuf::QQuaternionRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<QtProtobuf::QQuaternion>)

namespace QtProtobuf {
namespace QImage_QtProtobufNested {
}

class QImage : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(QImage)
    Q_PROPERTY(QByteArray data READ data WRITE setData NOTIFY dataChanged SCRIPTABLE true)
    Q_PROPERTY(QString format READ format WRITE setFormat NOTIFY formatChanged SCRIPTABLE true)

public:
    QImage(QObject *parent = nullptr);
    QImage(const QByteArray &data,QObject *parent = nullptr);
    QImage(const QByteArray &data,const QString &format,QObject *parent = nullptr);
    virtual ~QImage();
    QImage(const QImage &other);
    QImage &operator =(const QImage &other);
    QImage(QImage &&other);
    QImage &operator =(QImage &&other);
    bool operator ==(const QImage &other) const;
    bool operator !=(const QImage &other) const;

    QByteArray data() const {
        return m_data;
    }


    QString format() const {
        return m_format;
    }

    void setData(const QByteArray &data);
    void setFormat(const QString &format);
    static void registerTypes();

signals:
    void dataChanged();
    void formatChanged();

private:

private:
    QByteArray m_data;
    QString m_format;
};

using QImageRepeated = QList<QSharedPointer<QImage>>;

}

Q_DECLARE_METATYPE(QtProtobuf::QImage)
Q_DECLARE_METATYPE(QtProtobuf::QImageRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<QtProtobuf::QImage>)
