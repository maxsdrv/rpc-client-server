/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#pragma once

#include <QObject>
#include <QMetaType>
#include <QList>
#include <QProtobufObject>
#include <QProtobufLazyMessagePointer>
#include <QSharedPointer>

#include <memory>
#include <unordered_map>

#include <QtQml/QQmlListProperty>
#include <QQmlListPropertyConstructor>

#include <QByteArray>
#include <QString>

namespace google {
namespace protobuf {
class DoubleValue;
using DoubleValueRepeated = QList<QSharedPointer<DoubleValue>>;

}
}


namespace google {
namespace protobuf {
class FloatValue;
using FloatValueRepeated = QList<QSharedPointer<FloatValue>>;

}
}


namespace google {
namespace protobuf {
class Int64Value;
using Int64ValueRepeated = QList<QSharedPointer<Int64Value>>;

}
}


namespace google {
namespace protobuf {
class UInt64Value;
using UInt64ValueRepeated = QList<QSharedPointer<UInt64Value>>;

}
}


namespace google {
namespace protobuf {
class Int32Value;
using Int32ValueRepeated = QList<QSharedPointer<Int32Value>>;

}
}


namespace google {
namespace protobuf {
class UInt32Value;
using UInt32ValueRepeated = QList<QSharedPointer<UInt32Value>>;

}
}


namespace google {
namespace protobuf {
class BoolValue;
using BoolValueRepeated = QList<QSharedPointer<BoolValue>>;

}
}


namespace google {
namespace protobuf {
class StringValue;
using StringValueRepeated = QList<QSharedPointer<StringValue>>;

}
}


namespace google {
namespace protobuf {
class BytesValue;
using BytesValueRepeated = QList<QSharedPointer<BytesValue>>;

}
}


namespace google {
namespace protobuf {
namespace DoubleValue_QtProtobufNested {
}

class DoubleValue : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(DoubleValue)
    Q_PROPERTY(double value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE true)

public:
    DoubleValue(QObject *parent = nullptr);
    DoubleValue(double value,QObject *parent = nullptr);
    virtual ~DoubleValue();
    DoubleValue(const DoubleValue &other);
    DoubleValue &operator =(const DoubleValue &other);
    DoubleValue(DoubleValue &&other);
    DoubleValue &operator =(DoubleValue &&other);
    bool operator ==(const DoubleValue &other) const;
    bool operator !=(const DoubleValue &other) const;

    double value() const {
        return m_value;
    }

    void setValue(const double &value) {
        if (m_value != value) {
            m_value = value;
            valueChanged();
        }
    }

    static void registerTypes();

signals:
    void valueChanged();

private:

private:
    double m_value;
};

using DoubleValueRepeated = QList<QSharedPointer<DoubleValue>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::DoubleValue)
Q_DECLARE_METATYPE(google::protobuf::DoubleValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::DoubleValue>)

namespace google {
namespace protobuf {
namespace FloatValue_QtProtobufNested {
}

class FloatValue : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(FloatValue)
    Q_PROPERTY(float value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE true)

public:
    FloatValue(QObject *parent = nullptr);
    FloatValue(float value,QObject *parent = nullptr);
    virtual ~FloatValue();
    FloatValue(const FloatValue &other);
    FloatValue &operator =(const FloatValue &other);
    FloatValue(FloatValue &&other);
    FloatValue &operator =(FloatValue &&other);
    bool operator ==(const FloatValue &other) const;
    bool operator !=(const FloatValue &other) const;

    float value() const {
        return m_value;
    }

    void setValue(const float &value) {
        if (m_value != value) {
            m_value = value;
            valueChanged();
        }
    }

    static void registerTypes();

signals:
    void valueChanged();

private:

private:
    float m_value;
};

using FloatValueRepeated = QList<QSharedPointer<FloatValue>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::FloatValue)
Q_DECLARE_METATYPE(google::protobuf::FloatValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::FloatValue>)

namespace google {
namespace protobuf {
namespace Int64Value_QtProtobufNested {
}

class Int64Value : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(Int64Value)
    Q_PROPERTY(QtProtobuf::int64 value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE false)

public:
    Int64Value(QObject *parent = nullptr);
    Int64Value(QtProtobuf::int64 value,QObject *parent = nullptr);
    virtual ~Int64Value();
    Int64Value(const Int64Value &other);
    Int64Value &operator =(const Int64Value &other);
    Int64Value(Int64Value &&other);
    Int64Value &operator =(Int64Value &&other);
    bool operator ==(const Int64Value &other) const;
    bool operator !=(const Int64Value &other) const;

    const QtProtobuf::int64 value() const {
        return m_value;
    }

    void setValue(const QtProtobuf::int64 &value) {
        if (m_value != value) {
            m_value = value;
            valueChanged();
        }
    }

    static void registerTypes();

signals:
    void valueChanged();

private:

private:
    QtProtobuf::int64 m_value;
};

using Int64ValueRepeated = QList<QSharedPointer<Int64Value>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::Int64Value)
Q_DECLARE_METATYPE(google::protobuf::Int64ValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::Int64Value>)

namespace google {
namespace protobuf {
namespace UInt64Value_QtProtobufNested {
}

class UInt64Value : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(UInt64Value)
    Q_PROPERTY(QtProtobuf::uint64 value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE true)

public:
    UInt64Value(QObject *parent = nullptr);
    UInt64Value(QtProtobuf::uint64 value,QObject *parent = nullptr);
    virtual ~UInt64Value();
    UInt64Value(const UInt64Value &other);
    UInt64Value &operator =(const UInt64Value &other);
    UInt64Value(UInt64Value &&other);
    UInt64Value &operator =(UInt64Value &&other);
    bool operator ==(const UInt64Value &other) const;
    bool operator !=(const UInt64Value &other) const;

    QtProtobuf::uint64 value() const {
        return m_value;
    }

    void setValue(const QtProtobuf::uint64 &value) {
        if (m_value != value) {
            m_value = value;
            valueChanged();
        }
    }

    static void registerTypes();

signals:
    void valueChanged();

private:

private:
    QtProtobuf::uint64 m_value;
};

using UInt64ValueRepeated = QList<QSharedPointer<UInt64Value>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::UInt64Value)
Q_DECLARE_METATYPE(google::protobuf::UInt64ValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::UInt64Value>)

namespace google {
namespace protobuf {
namespace Int32Value_QtProtobufNested {
}

class Int32Value : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(Int32Value)
    Q_PROPERTY(QtProtobuf::int32 value_p READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE false)
    Q_PROPERTY(int value READ value_p WRITE setValue_p NOTIFY valueChanged SCRIPTABLE true)

public:
    Int32Value(QObject *parent = nullptr);
    Int32Value(QtProtobuf::int32 value,QObject *parent = nullptr);
    virtual ~Int32Value();
    Int32Value(const Int32Value &other);
    Int32Value &operator =(const Int32Value &other);
    Int32Value(Int32Value &&other);
    Int32Value &operator =(Int32Value &&other);
    bool operator ==(const Int32Value &other) const;
    bool operator !=(const Int32Value &other) const;

    const QtProtobuf::int32 value() const {
        return m_value;
    }

    void setValue(const QtProtobuf::int32 &value) {
        if (m_value != value) {
            m_value = value;
            valueChanged();
        }
    }

    static void registerTypes();

signals:
    void valueChanged();

private:
    int value_p() const {
        return m_value;
    }

    void setValue_p(const int &value) {
        if (m_value != value) {
            m_value = value;
            valueChanged();
        }
    }


private:
    QtProtobuf::int32 m_value;
};

using Int32ValueRepeated = QList<QSharedPointer<Int32Value>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::Int32Value)
Q_DECLARE_METATYPE(google::protobuf::Int32ValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::Int32Value>)

namespace google {
namespace protobuf {
namespace UInt32Value_QtProtobufNested {
}

class UInt32Value : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(UInt32Value)
    Q_PROPERTY(QtProtobuf::uint32 value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE true)

public:
    UInt32Value(QObject *parent = nullptr);
    UInt32Value(QtProtobuf::uint32 value,QObject *parent = nullptr);
    virtual ~UInt32Value();
    UInt32Value(const UInt32Value &other);
    UInt32Value &operator =(const UInt32Value &other);
    UInt32Value(UInt32Value &&other);
    UInt32Value &operator =(UInt32Value &&other);
    bool operator ==(const UInt32Value &other) const;
    bool operator !=(const UInt32Value &other) const;

    QtProtobuf::uint32 value() const {
        return m_value;
    }

    void setValue(const QtProtobuf::uint32 &value) {
        if (m_value != value) {
            m_value = value;
            valueChanged();
        }
    }

    static void registerTypes();

signals:
    void valueChanged();

private:

private:
    QtProtobuf::uint32 m_value;
};

using UInt32ValueRepeated = QList<QSharedPointer<UInt32Value>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::UInt32Value)
Q_DECLARE_METATYPE(google::protobuf::UInt32ValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::UInt32Value>)

namespace google {
namespace protobuf {
namespace BoolValue_QtProtobufNested {
}

class BoolValue : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(BoolValue)
    Q_PROPERTY(bool value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE true)

public:
    BoolValue(QObject *parent = nullptr);
    BoolValue(bool value,QObject *parent = nullptr);
    virtual ~BoolValue();
    BoolValue(const BoolValue &other);
    BoolValue &operator =(const BoolValue &other);
    BoolValue(BoolValue &&other);
    BoolValue &operator =(BoolValue &&other);
    bool operator ==(const BoolValue &other) const;
    bool operator !=(const BoolValue &other) const;

    bool value() const {
        return m_value;
    }

    void setValue(const bool &value) {
        if (m_value != value) {
            m_value = value;
            valueChanged();
        }
    }

    static void registerTypes();

signals:
    void valueChanged();

private:

private:
    bool m_value;
};

using BoolValueRepeated = QList<QSharedPointer<BoolValue>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::BoolValue)
Q_DECLARE_METATYPE(google::protobuf::BoolValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::BoolValue>)

namespace google {
namespace protobuf {
namespace StringValue_QtProtobufNested {
}

class StringValue : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(StringValue)
    Q_PROPERTY(QString value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE true)

public:
    StringValue(QObject *parent = nullptr);
    StringValue(const QString &value,QObject *parent = nullptr);
    virtual ~StringValue();
    StringValue(const StringValue &other);
    StringValue &operator =(const StringValue &other);
    StringValue(StringValue &&other);
    StringValue &operator =(StringValue &&other);
    bool operator ==(const StringValue &other) const;
    bool operator !=(const StringValue &other) const;

    QString value() const {
        return m_value;
    }

    void setValue(const QString &value);
    static void registerTypes();

signals:
    void valueChanged();

private:

private:
    QString m_value;
};

using StringValueRepeated = QList<QSharedPointer<StringValue>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::StringValue)
Q_DECLARE_METATYPE(google::protobuf::StringValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::StringValue>)

namespace google {
namespace protobuf {
namespace BytesValue_QtProtobufNested {
}

class BytesValue : public QObject
{
    Q_OBJECT
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(BytesValue)
    Q_PROPERTY(QByteArray value READ value WRITE setValue NOTIFY valueChanged SCRIPTABLE true)

public:
    BytesValue(QObject *parent = nullptr);
    BytesValue(const QByteArray &value,QObject *parent = nullptr);
    virtual ~BytesValue();
    BytesValue(const BytesValue &other);
    BytesValue &operator =(const BytesValue &other);
    BytesValue(BytesValue &&other);
    BytesValue &operator =(BytesValue &&other);
    bool operator ==(const BytesValue &other) const;
    bool operator !=(const BytesValue &other) const;

    QByteArray value() const {
        return m_value;
    }

    void setValue(const QByteArray &value);
    static void registerTypes();

signals:
    void valueChanged();

private:

private:
    QByteArray m_value;
};

using BytesValueRepeated = QList<QSharedPointer<BytesValue>>;

}
}

Q_DECLARE_METATYPE(google::protobuf::BytesValue)
Q_DECLARE_METATYPE(google::protobuf::BytesValueRepeated)
Q_DECLARE_METATYPE(QQmlListProperty<google::protobuf::BytesValue>)
